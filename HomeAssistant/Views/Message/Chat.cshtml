@using HomeAssistant.Core.Models.Message
@using System.Security.Claims
@model ChatDetailsViewModel


@{
	Dictionary<string, string> previousPages = new();

	previousPages.Add("Message Center", "/Message/index");
	previousPages.Add($"Chat", "#");
	ViewBag.previousPages = previousPages;
}

<link rel="stylesheet" href="~/css/message.css" asp-append-version="true" />

<div class="card">
	<div class="card-header">
		<div class="smallpfp">
			<img src="/Image/Profile/@(Model.UserId2)" alt="Profile Picture" />
		</div>
		<p>@Model.Username2</p>
	</div>
	<div class="card-body">
		<div class="messages-container">	
			@foreach (var message in Model.Messages)
			{
				if (message.UserId == Model.currentUserId)
				{
					<div class="current-user-message">
						<div class="message-and-time">
							<p class="message-text">@message.MessageContent</p>
							<p class="message-date">@message.CreatedOn</p>
						</div>
						<div class="smallpfp">
							<img src="/Image/Profile/@(Model.currentUserId)" alt="Profile Picture" />
						</div>
					</div>
				}
				else
				{
					<div class="other-user-message">
						<div class="smallpfp">
							<img src="/Image/Profile/@(Model.UserId2)" alt="Profile Picture" />
						</div>
						<div class="message-and-time2">
							<p class="message-text">@message.MessageContent</p>
							<p class="message-date">@message.CreatedOn</p>
						</div>
					</div>
				}
			}
		</div>
	</div>
	<form id="send-container-form" class="input-form" onsubmit="Send(); return false;">
		<input hidden type="text" id="chatRoomId" value="@Model.ChatRoomId" />
		<input hidden type="text" id="recipientId" value="@Model.UserId2" />
		<div class="send-container">
			<input autocomplete="off" class="form-control" id="messageToSend" type="text" placeholder="Send Message...." />
			<button disabled type="submit" class="btn btn-primary sendBtn">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.2 by - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L284 427.7l-68.5 74.1c-8.9 9.7-22.9 12.9-35.2 8.1S160 493.2 160 480V396.4c0-4 1.5-7.8 4.2-10.7L331.8 202.8c5.8-6.3 5.6-16-.4-22s-15.7-6.4-22-.7L106 360.8 17.7 316.6C7.1 311.3 .3 300.7 0 288.9s5.9-22.8 16.1-28.7l448-256c10.7-6.1 23.9-5.5 34 1.4z" /></svg>
			</button>
		</div>
	</form>
</div>


@section Scripts {
	<script src="~/js/signalr/dist/browser/signalr.js" asp-append-version="true"></script>
	<script src="~/js/animations.js" asp-append-version="true"></script>

	<script>
        "use strict";

        let options = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        let observer = new IntersectionObserver(handleIntersection, options);

        document.addEventListener("DOMContentLoaded", () => {
            const spinnerContainer = document.createElement('div');
            spinnerContainer.className = 'spinner-container';

            const spinnerBorder = document.createElement('div');
            spinnerBorder.className = 'spinner-border';
            spinnerBorder.setAttribute('role', 'status');

            const visuallyHiddenSpan = document.createElement('span');
            visuallyHiddenSpan.className = 'visually-hidden';
            visuallyHiddenSpan.innerText = 'Loading...';

            spinnerBorder.appendChild(visuallyHiddenSpan);

            spinnerContainer.appendChild(spinnerBorder);

            document.querySelector(".messages-container").insertBefore(spinnerContainer, document.querySelector(".messages-container").firstChild);

            observer.observe(document.querySelector(".spinner-container"));

            document.getElementById("messageToSend").addEventListener("input", (e) => {
                if (!e.target.value) {
                    document.querySelector(".sendBtn").disabled = true;
                } else {
                    document.querySelector(".sendBtn").disabled = false;
                }
            })
        });

        var chatBox = document.querySelector(".card-body");
        chatBox.scrollTop = chatBox.scrollHeight;

        var connection = new signalR.HubConnectionBuilder().withUrl("/messageHub").build();

        connection.on("LoadMessage", function (message) {

            var div = document.createElement("div");
            div.classList.add("other-user-message");
            div.innerHTML =
                `
                <div class="smallpfp">
                    <img src="/Image/Profile/@(Model.UserId2)}" alt="Profile Picture" />
                </div>
                <div class="message-and-time2">
                    <p class="message-text">${message}</p>
                    <p class="message-date">Less than a minute ago</p>
                </div>`;
            document.querySelector(".messages-container").append(div);

            var chatBox = document.querySelector(".card-body");
            chatBox.scrollTop = chatBox.scrollHeight;
        });

        connection.start().then(() => document.querySelector(".sendBtn").disabled ? false:true).catch(function (err) {
            return console.error(err.toString());
        });

        let chatRoomId = parseInt(document.getElementById("chatRoomId").value);
        let recipientId = document.getElementById("recipientId").value;

        const delay = ms => new Promise(res => setTimeout(res, ms));
        async function Send() {
            let message = document.getElementById("messageToSend").value;

            var div = document.createElement("div");
            div.classList.add("current-user-message");
            div.innerHTML =
                `<div class="message-and-time">
                        <p class="message-text">${message}</p>
                        <p class="message-date">Less than a minute ago</p>
                    </div>
                    <div class="smallpfp">
                        <img src="/Image/Profile/@(Model.currentUserId)" alt="Profile Picture" />
                    </div>`

            document.querySelector(".messages-container").append(div);

            document.getElementById("messageToSend").value = "";

            var chatBox = document.querySelector(".card-body");
            chatBox.scrollTop = chatBox.scrollHeight;

            connection.invoke("SendMessage", chatRoomId, recipientId, message).catch(function (error) {
                div.classList += (" alert alert-danger");
                div.querySelector(".message-date").textContent = "Couldn't send message!";
            });

            document.querySelector(".sendBtn").disabled = true;
            document.getElementById("send-container-form").setAttribute("onsubmit", "return false;");
            document.querySelector(".sendBtn>svg").style.fill = "red";

            await delay(1800);
            document.getElementById("send-container-form").setAttribute("onsubmit", "Send(); return false;");
            document.querySelector(".sendBtn>svg").style.fill = "white";
        }

        let skip = 20;
        let take = 20;
        function LoadMoreMessages() {
            fetch(`/Message/LoadMessageRangeJson?chatroomId=${chatRoomId}&skip=${skip}&take=${take}`)
                .then(r => r.json())
                .then(data => {
                    document.querySelector(".spinner-container").remove();

                    if (data.length===0) {
                        return;
                    }

                    skip += take;

                    var currentScrollPos = chatBox.scrollTop;
                    var chatBoxHeight = chatBox.scrollHeight;

                    data.forEach(message => {
                        if (message.userId != recipientId) {
                            var div = document.createElement("div");
                            div.classList.add("current-user-message");
                            div.innerHTML =
                                `<div class="message-and-time">
                                    <p class="message-text">${message.messageContent}</p>
                                    <p class="message-date">${formatDateTime(message.createdOn)}</p>
                                </div>
                                <div class="smallpfp">
                                    <img src="/Image/Profile/@(Model.currentUserId) alt="Profile Picture" />
                                </div>`

                            document.querySelector(".messages-container").insertAdjacentElement("afterbegin", div);
                        }
                        else {
                            var div = document.createElement("div");
                            div.classList.add("other-user-message");
                            div.innerHTML =
                                `
                            <div class="smallpfp">
                                <img src="/Image/Profile/@(Model.UserId2) alt="Profile Picture" />
                            </div>
                            <div class="message-and-time2">
                                <p class="message-text">${message.messageContent}</p>
                                <p class="message-date">${formatDateTime(message.createdOn)}</p>
                            </div>`;
                            document.querySelector(".messages-container").insertAdjacentElement("afterbegin", div);
                        }
                    });
                    document.querySelector(".messages-container").insertAdjacentHTML("afterbegin", `<div class="spinner-container">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>`)

                    let observer = new IntersectionObserver(handleIntersection, options);
                    observer.observe(document.querySelector(".spinner-container"));

                    var newChatBoxHeight = chatBox.scrollHeight;
                    var heightDifference = newChatBoxHeight - chatBoxHeight;

                    chatBox.scrollTop = currentScrollPos + heightDifference;
                });
        }

        function handleIntersection(entries, observer) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    LoadMoreMessages();
                }
            });
        }

        function formatDateTime(originalDateTime) {
            const date = new Date(originalDateTime);

            const month = date.getMonth() + 1;
            const day = date.getDate();
            const year = date.getFullYear();
            let hours = date.getHours();
            const minutes = date.getMinutes();
            const seconds = date.getSeconds();

            const ampm = hours >= 12 ? 'PM' : 'AM';

            hours = hours % 12;
            hours = hours ? hours : 12;

            return `${month}/${day}/${year} ${hours}:${minutes}:${seconds} ${ampm}`;
        }
	</script>
}