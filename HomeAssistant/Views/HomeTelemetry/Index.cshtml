@using HomeAssistant.Core.Enums
@using HomeAssistant.Core.Models.HomeTelemetry
@model Dictionary<DateTime, HomeTelemetryViewModel>
<h1>Telemetry Data</h1>

<form method="get" asp-action="Index">
    <input hidden name="dataRange" value="@ViewBag.DateRange" />
    <input disabled id="startDate" type="datetime-local" name="startDate" value="@((ViewBag.StartDate??DateTime.Now).ToString("yyyy-MM-dd'T'HH:mm"))" />
    <input type="checkbox" onclick="checkBox1(this)"/>

    <input disabled id="endDate" type="datetime-local" name="endDate" value="@DateTime.Now.ToString("yyyy-MM-dd'T'HH:mm")" />
    <input type="checkbox" onclick="checkBox2(this)" />
    <button type="submit" class="btn btn-primary">Filter</button>
</form>

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <p>Interval: @(((DataRangeEnum)ViewBag.DateRange).ToString())</p>
    </button>
    <ul class="dropdown-menu">
        @foreach (var option in Enum.GetValues(typeof(DataRangeEnum)))
        {
            <li>
                <a class="dropdown-item"
                asp-action="Index"
                   asp-route-dataRange="@option"
                   asp-route-startDate="@ViewBag.StartDate"
                   asp-route-endDate="@ViewBag.EndDate">
                    @option
                </a>
            </li>
        }
    </ul>
</div>

<canvas id="myChart" width="1600" height="800"></canvas>

@section Scripts {
    <script src="~/js/chartjs/chart.js"></script>

    <script>
        function checkBox1(e) {
            if (e.checked) {
                document.getElementById("startDate").removeAttribute("disabled");
            }
            else{
                document.getElementById("startDate").setAttribute("disabled", "true");
            }
        }

        function checkBox2(e) {
            if (e.checked) {
                document.getElementById("endDate").removeAttribute("disabled");
            }
            else {
                document.getElementById("endDate").setAttribute("disabled", "true");
            }
        }

        var labels = [];
        var humidityData = [];
        var temperatureData = [];
        var cpmData = [];
        var radiationData = [];
        var unmodifiedDate = [];

        @{
            string dateFormat = string.Empty;

            switch ((DataRangeEnum)ViewBag.DateRange)
            {
                case DataRangeEnum.Hour:
                    dateFormat = "HH:mm";
                    break;
                case DataRangeEnum.Day:
                    dateFormat = "dd-MM";
                    break;
                case DataRangeEnum.Month:
                    dateFormat = "MM-yyyy";
                    break;
                default:
                    dateFormat = "HH:mm";
                    break;
            }
        }
        @foreach (var entry in Model)
        {            
            @:labels.push("@entry.Key.ToString(dateFormat)");
            @:unmodifiedDate.push("@entry.Key.ToString("dd-MM-yyyy HH:mm:ss")");
            @:humidityData.push(@entry.Value.Humidity);
            @:temperatureData.push(@entry.Value.Temperature);
            @:cpmData.push(@entry.Value.CPM);
            @:radiationData.push(@entry.Value.Radiation);
        }

            var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Humidity',
                        data: humidityData,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                        hidden: true
                    },
                    {
                        label: 'Temperature',
                        data: temperatureData,
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1,
                        hidden: true
                    },
                    {
                        label: 'CPM',
                        data: cpmData,
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1,
                        hidden: true
                    },
                    {
                        label: 'Radiation',
                        data: radiationData,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        hidden: false 
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        onClick: function (e, legendItem, legend) {

                            this.chart.data.datasets.forEach(function (dataset, index) {
                                dataset.hidden = true;
                            });

                            var datasetIndex = legendItem.datasetIndex;
                            var clickedDataset = this.chart.data.datasets[datasetIndex];
                            clickedDataset.hidden = !clickedDataset.hidden;

                            this.chart.update();
                        }
                    },
                    tooltip: {
                        callbacks: {
                            title: function (context) {    
                                return unmodifiedDate[unmodifiedDate.findIndex(element => element.includes(context[0].label))];
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        title: {
                            display: true,
                            text: 'Date and Time (@(dateFormat))'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Values'
                        },
                        ticks: {
                            callback: function (value, index, values) {
                                // Determine which dataset is currently visible    
                                var visibleDataset = this.chart.data.datasets.find(dataset => !dataset.hidden);
                                if (visibleDataset.label === 'Humidity') {
                                    return value + ' %';
                                } else if (visibleDataset.label === 'Temperature') {
                                    return value + ' °C';
                                } else if (visibleDataset.label === 'CPM') {
                                    return value + ' count';
                                } else if (visibleDataset.label === 'Radiation') {
                                    return value + ' μSv';
                                }
                                return value;
                            }
                        }
                    }

                }
            }
        });
    </script>
}